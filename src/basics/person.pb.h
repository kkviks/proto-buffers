// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Person* Arena::CreateMaybeMessage<::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EyeColor : int {
  EYE_COLOR_UNKNOWN = 0,
  EYE_COLOR_RED = 1,
  EYE_COLOR_GREEN = 2,
  EYE_COLOR_BLUE = 3,
  EyeColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EyeColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EyeColor_IsValid(int value);
constexpr EyeColor EyeColor_MIN = EYE_COLOR_UNKNOWN;
constexpr EyeColor EyeColor_MAX = EYE_COLOR_BLUE;
constexpr int EyeColor_ARRAYSIZE = EyeColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EyeColor_descriptor();
template<typename T>
inline const std::string& EyeColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EyeColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EyeColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EyeColor_descriptor(), enum_t_value);
}
inline bool EyeColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EyeColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EyeColor>(
    EyeColor_descriptor(), name, value);
}
// ===================================================================

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit constexpr Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Person& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 7,
    kAccountNameFieldNumber = 3,
    kPictureFieldNumber = 4,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 2,
    kIsVerifiedFieldNumber = 5,
    kHeightFieldNumber = 6,
    kEyeColorFieldNumber = 8,
  };
  // repeated string phones = 7;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  const std::string& phones(int index) const;
  std::string* mutable_phones(int index);
  void set_phones(int index, const std::string& value);
  void set_phones(int index, std::string&& value);
  void set_phones(int index, const char* value);
  void set_phones(int index, const char* value, size_t size);
  std::string* add_phones();
  void add_phones(const std::string& value);
  void add_phones(std::string&& value);
  void add_phones(const char* value);
  void add_phones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phones();
  private:
  const std::string& _internal_phones(int index) const;
  std::string* _internal_add_phones();
  public:

  // string account_name = 3;
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // bytes picture = 4;
  void clear_picture();
  const std::string& picture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picture();
  PROTOBUF_NODISCARD std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 age = 2;
  void clear_age();
  uint32_t age() const;
  void set_age(uint32_t value);
  private:
  uint32_t _internal_age() const;
  void _internal_set_age(uint32_t value);
  public:

  // bool is_verified = 5;
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // float height = 6;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // .EyeColor eye_color = 8;
  void clear_eye_color();
  ::EyeColor eye_color() const;
  void set_eye_color(::EyeColor value);
  private:
  ::EyeColor _internal_eye_color() const;
  void _internal_set_eye_color(::EyeColor value);
  public:

  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phones_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  uint32_t id_;
  uint32_t age_;
  bool is_verified_;
  float height_;
  int eye_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// uint32 id = 1;
inline void Person::clear_id() {
  id_ = 0u;
}
inline uint32_t Person::_internal_id() const {
  return id_;
}
inline uint32_t Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Person::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Person.id)
}

// uint32 age = 2;
inline void Person::clear_age() {
  age_ = 0u;
}
inline uint32_t Person::_internal_age() const {
  return age_;
}
inline uint32_t Person::age() const {
  // @@protoc_insertion_point(field_get:Person.age)
  return _internal_age();
}
inline void Person::_internal_set_age(uint32_t value) {
  
  age_ = value;
}
inline void Person::set_age(uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Person.age)
}

// string account_name = 3;
inline void Person::clear_account_name() {
  account_name_.ClearToEmpty();
}
inline const std::string& Person::account_name() const {
  // @@protoc_insertion_point(field_get:Person.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_account_name(ArgT0&& arg0, ArgT... args) {
 
 account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.account_name)
}
inline std::string* Person::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:Person.account_name)
  return _s;
}
inline const std::string& Person::_internal_account_name() const {
  return account_name_.Get();
}
inline void Person::_internal_set_account_name(const std::string& value) {
  
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_account_name() {
  
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_account_name() {
  // @@protoc_insertion_point(field_release:Person.account_name)
  return account_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.account_name)
}

// bytes picture = 4;
inline void Person::clear_picture() {
  picture_.ClearToEmpty();
}
inline const std::string& Person::picture() const {
  // @@protoc_insertion_point(field_get:Person.picture)
  return _internal_picture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_picture(ArgT0&& arg0, ArgT... args) {
 
 picture_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.picture)
}
inline std::string* Person::mutable_picture() {
  std::string* _s = _internal_mutable_picture();
  // @@protoc_insertion_point(field_mutable:Person.picture)
  return _s;
}
inline const std::string& Person::_internal_picture() const {
  return picture_.Get();
}
inline void Person::_internal_set_picture(const std::string& value) {
  
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_picture() {
  
  return picture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_picture() {
  // @@protoc_insertion_point(field_release:Person.picture)
  return picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (picture_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.picture)
}

// bool is_verified = 5;
inline void Person::clear_is_verified() {
  is_verified_ = false;
}
inline bool Person::_internal_is_verified() const {
  return is_verified_;
}
inline bool Person::is_verified() const {
  // @@protoc_insertion_point(field_get:Person.is_verified)
  return _internal_is_verified();
}
inline void Person::_internal_set_is_verified(bool value) {
  
  is_verified_ = value;
}
inline void Person::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:Person.is_verified)
}

// float height = 6;
inline void Person::clear_height() {
  height_ = 0;
}
inline float Person::_internal_height() const {
  return height_;
}
inline float Person::height() const {
  // @@protoc_insertion_point(field_get:Person.height)
  return _internal_height();
}
inline void Person::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Person::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Person.height)
}

// repeated string phones = 7;
inline int Person::_internal_phones_size() const {
  return phones_.size();
}
inline int Person::phones_size() const {
  return _internal_phones_size();
}
inline void Person::clear_phones() {
  phones_.Clear();
}
inline std::string* Person::add_phones() {
  std::string* _s = _internal_add_phones();
  // @@protoc_insertion_point(field_add_mutable:Person.phones)
  return _s;
}
inline const std::string& Person::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const std::string& Person::phones(int index) const {
  // @@protoc_insertion_point(field_get:Person.phones)
  return _internal_phones(index);
}
inline std::string* Person::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:Person.phones)
  return phones_.Mutable(index);
}
inline void Person::set_phones(int index, const std::string& value) {
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Person.phones)
}
inline void Person::set_phones(int index, std::string&& value) {
  phones_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Person.phones)
}
inline void Person::set_phones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.phones)
}
inline void Person::set_phones(int index, const char* value, size_t size) {
  phones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.phones)
}
inline std::string* Person::_internal_add_phones() {
  return phones_.Add();
}
inline void Person::add_phones(const std::string& value) {
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.phones)
}
inline void Person::add_phones(std::string&& value) {
  phones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.phones)
}
inline void Person::add_phones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.phones)
}
inline void Person::add_phones(const char* value, size_t size) {
  phones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.phones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::phones() const {
  // @@protoc_insertion_point(field_list:Person.phones)
  return phones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:Person.phones)
  return &phones_;
}

// .EyeColor eye_color = 8;
inline void Person::clear_eye_color() {
  eye_color_ = 0;
}
inline ::EyeColor Person::_internal_eye_color() const {
  return static_cast< ::EyeColor >(eye_color_);
}
inline ::EyeColor Person::eye_color() const {
  // @@protoc_insertion_point(field_get:Person.eye_color)
  return _internal_eye_color();
}
inline void Person::_internal_set_eye_color(::EyeColor value) {
  
  eye_color_ = value;
}
inline void Person::set_eye_color(::EyeColor value) {
  _internal_set_eye_color(value);
  // @@protoc_insertion_point(field_set:Person.eye_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EyeColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EyeColor>() {
  return ::EyeColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
